name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tshark
        
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Note: Wireshark installation on Windows in CI is complex
        # For now, we'll skip tshark-dependent tests on Windows CI
        echo "Skipping Wireshark installation on Windows CI"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test import and basic functionality
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            # Test basic imports (excluding pyshark on CI)
            import tkinter
            import matplotlib
            import numpy
            import sklearn
            import nltk
            print('✅ Core dependencies imported successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run security checks with bandit
      run: |
        bandit -r . -x ./venv/,./env/ || true
        
    - name: Check for known security vulnerabilities
      run: |
        safety check || true

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy
        
    - name: Check code formatting with black
      run: |
        black --check --diff . || true
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . || true
